How did viewing a diff between two versions of a file help you see the bug that was introduced?

Instead of having to do a manual line by line comparison of each file, potentially wading through
100s of lines of code. I could use diff to find the exact lines where the two files were different. 

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

One case where this is useful is the scenario where a design decision has to be changed. Access to entire history 
makes it easy to determine how big such changes would be. It is also an advantage to be able to track how a specific 
feature changes. 

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, 
vs having versions automatically saved, like Google Docs does? 

Pro: 
Can decide when to save (avoids saving trivial or too big changes automatically, can decide exactly when to save)
Can decide what to save (enforces 1 logical change per commit rule)

Con:
Can decide when to save (easy to forget when to save)

Why do you think some version control systems, like Git, allow saving multiple files in one commit, 
while others, like Google Docs, treat each file separately? 

Main reason: Google Docs isn't geared towards code. It is aimed towards office documents where interdependence among files 
is very rare. I think this is the main reason behind the different strategies. 

How can you use the commands git log and git diff to view the history of files? 

git log shows the entire commmit history for the repository. This can be used to find all changes to files since the begining of the repository. 
git diff can be used to view changes between any two commits in the repository history. 